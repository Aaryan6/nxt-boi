{
  "name": "DnDBox",
  "type": "registry:ui",
  "registryDependencies": ["button", "card"],
  "dependencies": [
    "react-dnd",
    "react-dnd-html5-backend",
    "react-dnd-touch-backend",
    "lucide-react"
  ],
  "devDependencies": [],
  "tailwind": {
    "config": {}
  },
  "cssVars": {},
  "files": [
    {
      "path": "types.ts",
      "target": "src/components/ui/auto-form/types.ts",
      "content": "\"use client\";\n\nimport { ArrowLeft, ArrowRight, Volume2 } from \"lucide-react\";\nimport { useEffect, useRef, useState } from \"react\";\nimport { DndProvider, useDrag, useDrop } from \"react-dnd\";\nimport { HTML5Backend } from \"react-dnd-html5-backend\";\nimport { TouchBackend } from \"react-dnd-touch-backend\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\n\ninterface AnswerOption {\n  id: string;\n  text: string;\n}\n\nconst data = {\n  question: \"What is the capital of France?\",\n  correctAnswer: \"Paris\",\n  options: [\n    { id: \"1\", text: \"Paris\" },\n    { id: \"2\", text: \"London\" },\n    { id: \"3\", text: \"Berlin\" },\n    { id: \"4\", text: \"Madrid\" },\n  ],\n};\n\n// Custom hook to determine the appropriate backend\nconst useBackend = () => {\n  const [backend, setBackend] = useState(() => HTML5Backend);\n\n  useEffect(() => {\n    const checkTouchDevice = () => {\n      return (\n        \"ontouchstart\" in window ||\n        navigator.maxTouchPoints > 0 ||\n        // @ts-ignore\n        navigator.msMaxTouchPoints > 0\n      );\n    };\n\n    if (checkTouchDevice()) {\n      setBackend(() => TouchBackend);\n    }\n  }, []);\n\n  return backend;\n};\n\n// Wrapper component for DndProvider\nconst DndProviderWrapper = ({ children }: { children: React.ReactNode }) => {\n  const backend = useBackend();\n\n  return <DndProvider backend={backend}>{children}</DndProvider>;\n};\n\nexport default function Home() {\n  const [isCorrect, setIsCorrect] = useState<boolean | null>(null);\n  const [droppedAnswer, setDroppedAnswer] = useState<string | null>(null);\n  const [showCorrectAnswer, setShowCorrectAnswer] = useState(false);\n\n  useEffect(() => {\n    setIsCorrect(null);\n    setDroppedAnswer(null);\n    setShowCorrectAnswer(false);\n  }, []);\n\n  const handleDrop = (item: AnswerOption) => {\n    const correct = item.text === data.correctAnswer;\n    setDroppedAnswer(item.text);\n    setIsCorrect(correct);\n    setShowCorrectAnswer(true);\n  };\n\n  const speakWord = (text: string) => {\n    if (typeof window !== \"undefined\" && window.speechSynthesis) {\n      const utterance = new SpeechSynthesisUtterance(text);\n      utterance.lang = \"en-US\";\n      window.speechSynthesis.speak(utterance);\n    }\n  };\n\n  return (\n    <DndProviderWrapper>\n      <Card className=\"w-full max-w-lg\">\n        <CardContent className=\"w-full p-6\">\n          <div className=\"mb-4 flex w-full items-center justify-between\">\n            <span className=\"text-lg text-gray-600\">Question 1 of 10</span>\n            <Button\n              variant=\"outline\"\n              size=\"icon\"\n              onClick={() => speakWord(data.question)}\n              className=\"rounded-full\"\n            >\n              <Volume2 className=\"h-4 w-4\" />\n              <span className=\"sr-only\">Pronounce question</span>\n            </Button>\n          </div>\n          <div className=\"mb-6 text-center text-2xl font-bold\">\n            {data.question}\n          </div>\n          <DropZone\n            onDrop={handleDrop}\n            isCorrect={isCorrect}\n            droppedAnswer={droppedAnswer}\n          />\n          <div className=\"mt-6 grid grid-cols-2 gap-4\">\n            {data.options && data.options.length > 0 ? (\n              data.options.map((option) => (\n                <DraggableAnswer\n                  key={option.id}\n                  id={option.id}\n                  text={option.text}\n                  isCorrect={\n                    showCorrectAnswer && option.text === data.correctAnswer\n                  }\n                />\n              ))\n            ) : (\n              <p>No options available</p>\n            )}\n          </div>\n          <div className=\"mt-6 flex items-center justify-between\">\n            <Button variant=\"outline\" onClick={() => {}} disabled={false}>\n              <ArrowLeft className=\"mr-2 h-4 w-4\" />\n              Previous\n            </Button>\n            <Button\n              variant=\"outline\"\n              onClick={() => {}}\n              disabled={!droppedAnswer}\n            >\n              Next\n              <ArrowRight className=\"ml-2 h-4 w-4\" />\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    </DndProviderWrapper>\n  );\n}\n\nconst DraggableAnswer = ({\n  id,\n  text,\n  isCorrect,\n}: AnswerOption & { isCorrect: boolean }) => {\n  const [{ isDragging }, drag, dragPreview] = useDrag(() => ({\n    type: \"answer\",\n    item: { id, text },\n    collect: (monitor) => ({\n      isDragging: !!monitor.isDragging(),\n    }),\n  }));\n\n  const ref = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    drag(ref);\n    dragPreview(ref);\n  }, [drag, dragPreview]);\n\n  return (\n    <div\n      ref={ref}\n      className={cursor-move rounded-lg p-3 font-medium shadow-sm transition-all ${\n        isDragging ? \"scale-105 opacity-50\" : \"opacity-100\"\n      } ${isCorrect ? \"bg-green-200\" : \"border bg-orange-100\"}}\n      aria-label={Drag answer: ${text}}\n    >\n      {text}\n    </div>\n  );\n};\n\nconst DropZone = ({\n  onDrop,\n  isCorrect,\n  droppedAnswer,\n}: {\n  onDrop: (item: AnswerOption) => void;\n  isCorrect: boolean | null;\n  droppedAnswer: string | null;\n}) => {\n  const [{ isOver }, drop] = useDrop(() => ({\n    accept: \"answer\",\n    drop: (item: AnswerOption) => onDrop(item),\n    collect: (monitor) => ({\n      isOver: !!monitor.isOver(),\n    }),\n  }));\n\n  const ref = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    drop(ref);\n  }, [drop]);\n\n  let bgColor = \"bg-gray-200\";\n  if (isCorrect === true) bgColor = \"bg-green-200\";\n  if (isCorrect === false) bgColor = \"bg-red-200\";\n\n  return (\n    <div\n      ref={ref}\n      className={h-24 w-full ${bgColor} flex flex-col items-center justify-center rounded-lg bg-orange-50 ${\n        isOver\n          ? \"border-4 border-orange-200\"\n          : \"border-4 border-dashed border-orange-200\"\n      } transition-all duration-300}\n      aria-label=\"Drop answer here\"\n    >\n      {droppedAnswer ? (\n        <>\n          <div className=\"mb-2 text-xl font-bold\">{droppedAnswer}</div>\n          <div className=\"text-sm\">\n            {isCorrect === true && \"✅ Correct!\"}\n            {isCorrect === false && \"❌ Incorrect. Try again!\"}\n          </div>\n        </>\n      ) : (\n        <p className=\"text-xl font-bold text-orange-500/50\">\n          Drop your answer here\n        </p>\n      )}\n    </div>\n  );\n};",
      "type": "registry:ui"
    }
  ]
}
